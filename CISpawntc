#Loads variables



#gets data on setup from etcd

#gets data from previous run
prevawsvms=`(curl http://127.0.0.1:4001/v2/keys/awsvms | jq '.node.value' | sed 's/.//;s/.$//')`
prevgcevms=`(curl http://127.0.0.1:4001/v2/keys/gcevms | jq '.node.value' | sed 's/.//;s/.$//')`
prevhoneypots=`(curl http://127.0.0.1:4001/v2/keys/totalhoneypots | jq '.node.value' | sed 's/.//;s/.$//')`

#swarm-master
publicipSWARMK=`(curl http://127.0.0.1:4001/v2/keys/swarm-master/ip | jq '.node.value' | sed 's/.//;s/.$//')`
SwarmTokenK=`(curl http://127.0.0.1:4001/v2/keys/swarm-master/token | jq '.node.value' | sed 's/.//;s/.$//')`

#SPAWN_CONSUL
ConsulVMNameK=`(curl http://127.0.0.1:4001/v2/keys/consul/name | jq '.node.value' | sed 's/.//;s/.$//')`
publicipCONSULK=`(curl http://127.0.0.1:4001/v2/keys/consul/ip | jq '.node.value' | sed 's/.//;s/.$//')`
ConsulPortK=`(curl http://127.0.0.1:4001/v2/keys/consul/port | jq '.node.value' | sed 's/.//;s/.$//')`

#spawn-receiver
ReceiverNameK=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/name | jq '.node.value' | sed 's/.//;s/.$//')`
publicipspawnreceiver=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/ip | jq '.node.value' | sed 's/.//;s/.$//')`
ReceiverPortK=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/port | jq '.node.value' | sed 's/.//;s/.$//')`





#Tests Honeypots
#remember that honeypots could also live on swarm-master
#limit that by launching a fake container locking the port used by Honepots??


j=0
while [ $j -lt $prevgcevms ]
do
   echo ""
   echo "Testing Honeypots on env-crate-$j "
   echo ""
   VMTest=`(curl http://127.0.0.1:4001/v2/keys/env-crate-$j/ip | jq '.node.value' | sed 's/.//;s/.$//')`
   REMOTEHOST=$VMTest
   REMOTEPORT=8080
   TIMEOUT=1

   if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "$(tput setaf 2) I was able to connect to ${REMOTEHOST}:${REMOTEPORT} $(tput sgr 0)"
   else
    echo "$(tput setaf 1)Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?). $(tput sgr 0)"
   fi
   
   #Increments counter for total GCE VMs
   true $(( j++ ))
   done


echo ""
echo "$(tput setaf 1)Testing AWS VMs ( $prevawsvms ) $(tput sgr 0)"
echo ""


#Tests Receiver


#!/bin/bash
REMOTEHOST=8.8.8.8
REMOTEPORT=53
TIMEOUT=1

if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "I was able to connect to ${REMOTEHOST}:${REMOTEPORT}"
else
    echo "Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?)."
fi



#Publish the results in a Dockerized web server

#Provide a status
