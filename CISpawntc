
#!/bin/bash
#Loads variables
#Must use Cloud1 for accounts (any way to change this?)
#Some variables are modified later by fetching data from etcd
. /home/ec2-user/Cloud1
echo "loaded Config file"


#gets data on setup from etcd

#gets data from previous run
prevawsvms=`(curl http://127.0.0.1:4001/v2/keys/awsvms | jq '.node.value' | sed 's/.//;s/.$//')`
prevgcevms=`(curl http://127.0.0.1:4001/v2/keys/gcevms | jq '.node.value' | sed 's/.//;s/.$//')`
prevhoneypots=`(curl http://127.0.0.1:4001/v2/keys/totalhoneypots | jq '.node.value' | sed 's/.//;s/.$//')`
HoneypotPortK=`(curl http://127.0.0.1:4001/v2/keys/HoneypotPort | jq '.node.value' | sed 's/.//;s/.$//')`

#swarm-master
publicipSWARMK=`(curl http://127.0.0.1:4001/v2/keys/swarm-master/ip | jq '.node.value' | sed 's/.//;s/.$//')`
SwarmTokenK=`(curl http://127.0.0.1:4001/v2/keys/swarm-master/token | jq '.node.value' | sed 's/.//;s/.$//')`

#SPAWN_CONSUL
ConsulVMNameK=`(curl http://127.0.0.1:4001/v2/keys/consul/name | jq '.node.value' | sed 's/.//;s/.$//')`
publicipCONSULK=`(curl http://127.0.0.1:4001/v2/keys/consul/ip | jq '.node.value' | sed 's/.//;s/.$//')`
ConsulPortK=`(curl http://127.0.0.1:4001/v2/keys/consul/port | jq '.node.value' | sed 's/.//;s/.$//')`

#spawn-receiver
ReceiverNameK=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/name | jq '.node.value' | sed 's/.//;s/.$//')`
publicipspawnreceiver=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/ip | jq '.node.value' | sed 's/.//;s/.$//')`
ReceiverPortK=`(curl http://127.0.0.1:4001/v2/keys/spawn-receiver/port | jq '.node.value' | sed 's/.//;s/.$//')`





#Tests Honeypots
#remember that honeypots could also live on swarm-master
#limit that by launching a fake container locking the port used by Honepots??

echo ""
echo "$(tput setaf 1)Testing GCE VMs ( $prevgcevms ) $(tput sgr 0)"
echo ""

j=0
while [ $j -lt $prevgcevms ]
do
   echo ""
   echo "Testing Honeypots on DM-GCE-$j "
   echo ""
   VMTest=`(curl http://127.0.0.1:4001/v2/keys/DM-GCE-$j/ip | jq '.node.value' | sed 's/.//;s/.$//')`
   REMOTEHOST=$VMTest
   REMOTEPORT=$HoneypotPortK
   TIMEOUT=1

   if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "$(tput setaf 2) I was able to connect to ${REMOTEHOST}:${REMOTEPORT} $(tput sgr 0)"
    #Write test output in etcd
    curl -L http://127.0.0.1:4001/v2/keys/DM-GCE-$j/TEST -XPUT -d value=PASSED
   else
    echo "$(tput setaf 1)Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?). $(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/DM-GCE-$j/TEST -XPUT -d value=FAILED
   fi
   
   echo""
   echo""
   echo curl testing
   #curl ${REMOTEHOST}:${REMOTEPORT}
   curltestk=`(curl ${REMOTEHOST}:${REMOTEPORT})`
   echo $curltestk
   searchString="result":" ok"
   case $curltestk in
    "$searchString") echo YES;;
    *"$searchString"*) echo SOMEWHERE;;
   esac
   echo ""
   echo ""
   
   #Increments counter for total GCE VMs
   true $(( j++ ))
   done
   #writes data to etcd in a new key

echo ""
echo "$(tput setaf 1)Testing AWS VMs ( $prevawsvms ) $(tput sgr 0)"
echo ""

i=0
while [ $i -lt $prevawsvms ]
do
    #Reads VM Name from etcd
    
    VMTest=`(curl http://127.0.0.1:4001/v2/keys/DM-AWS-$i/ip | jq '.node.value' | sed 's/.//;s/.$//')`
    
    echo ""
    echo "$(tput setaf 1) Testing VM $VMTest $(tput sgr 0)"
    echo ""
    REMOTEHOST=$VMTest
    REMOTEPORT=$HoneypotPortK
    TIMEOUT=1

   if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "$(tput setaf 2) I was able to connect to ${REMOTEHOST}:${REMOTEPORT} $(tput sgr 0)"
    #Write test output in etcd
    curl -L http://127.0.0.1:4001/v2/keys/DM-AWS-$i/TEST -XPUT -d value=PASSED
   else
    echo "$(tput setaf 1)Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?). $(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/DM-AWS-$i/TEST -XPUT -d value=FAILED
   fi   
    
    #Increments counter for total AWS VMs
    true $(( i++ ))
   done


#Tests Receiver

echo ""
echo "$(tput setaf 1)Testing Receiver VM on port $ReceiverPortK $(tput sgr 0)"
echo ""

REMOTEHOST=$publicipspawnreceiver
REMOTEPORT=$ReceiverPortK
TIMEOUT=1

if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "$(tput setaf 2) I was able to connect to ${REMOTEHOST}:${REMOTEPORT} $(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/spawn-receiver/TEST -XPUT -d value=PASSED
else
    echo "$(tput setaf 1) Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?).$(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/spawn-receiver/TEST -XPUT -d value=FAILED
fi

#Tests Consul

ConsulVMNameK=`(curl http://127.0.0.1:4001/v2/keys/consul/name | jq '.node.value' | sed 's/.//;s/.$//')`
publicipCONSULK=`(curl http://127.0.0.1:4001/v2/keys/consul/ip | jq '.node.value' | sed 's/.//;s/.$//')`
ConsulPortK=`(curl http://127.0.0.1:4001/v2/keys/consul/port | jq '.node.value' | sed 's/.//;s/.$//')`

echo ""
echo "$(tput setaf 1)Testing Consul Instance on port $ConsulPortK $(tput sgr 0)"
echo ""

REMOTEHOST=$publicipCONSULK
REMOTEPORT=$ConsulPortK
TIMEOUT=1

if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
    echo "$(tput setaf 2) I was able to connect to ${REMOTEHOST}:${REMOTEPORT} $(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/consul/TEST -XPUT -d value=PASSED
else
    echo "$(tput setaf 1) Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?).$(tput sgr 0)"
    curl -L http://127.0.0.1:4001/v2/keys/consul/TEST -XPUT -d value=FAILED
fi

echo ""
echo "$(tput setaf 6)Testing Finished: check etcd-browser for results $(tput sgr 0)"
echo ""


#TEST basic
#REMOTEHOST=8.8.8.8
#REMOTEPORT=53
#TIMEOUT=1

#if nc -w $TIMEOUT -z $REMOTEHOST $REMOTEPORT; then
#    echo "I was able to connect to ${REMOTEHOST}:${REMOTEPORT}"
#else
#    echo "Connection to ${REMOTEHOST}:${REMOTEPORT} failed. Exit code from Netcat was ($?)."
#fi



#Publish the results in a Dockerized web server

#Provide a status
